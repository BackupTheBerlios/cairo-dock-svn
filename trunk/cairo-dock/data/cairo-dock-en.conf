#!en;1.2.11
######## This is the conf file of cairo-dock, released under the GPL.##########
######## It is parsed by cairo-dock to automatically generate an appropriate GUI,##########
######## so don't mess into it, except you know what you're doing ! ;-)##########

[Position]

#F[Position on the screen]
frame1 =

#s[bottom;top;left;right] Choose the screen border regarding to which the dock will place itself.
# The icons will scroll according to the chosen placement type.
# Of course the dock can be placed anywhere on the screen, here we specify regarding to what:
screen border = bottom

#e-[0.;1.] Relative alignment.
# At 0, the dock will place itself regarding the left corner if horizontal and the top corner if vertical,
# at 1 regarding the right corner if horizontal and the bottom corner if vertical,
# and at 0.5, regarding the middle :
alignment = .5

#F-[Position regarding the chosen screen's edge]
frame2 =

#i-[-1024;1024] Gap from the absolute position on the screen's edge :
x gap = 0
#i-[-20;2000] Distance to the screen's edge:
y gap = 25

#F-
frame2_ = 

#b-
# Should the window reserve space at the edge of the screen for itself only ?
reserve space = false

[Auto-Hide]

#b
#Automatically hide the dock when mouse leaves it and show a callback zone instead ?
auto-hide = false

#i Size of the callback zone, where to put the cursor to call back the dock (width x height):
zone width = 200
#i ...
zone height = 20

#S Filename of an image to put on the zone as background, or nothing if you want to let it blank:
background image = background-cairo-dock.svg

#e-[0;1] Alpha used to render the callback zone's background:
alpha = 0.5

#b- Reverse the callback zone's image when the dock is on top ?
reverse visible image = true

[Cairo Dock]

#s[] Language (for config windows) : /
language = en

#T-3[launchers;applications;applets] Order of the different types of icons :
icon's type order = launchers;applications;applets

#F[Carousel]
frame1 = 

#i[0;9999] Maximum width that can have the dock.
# You can scroll with the mouse's wheel to make the icons scroll, like a carousel.
# If you put 0, the dock will automatically adapt itself to the desktop's size.
max autorized width = 0

#b Force carousel view ?
# (this will automatically adapt the dock's size to make it loop on itself)
force loop = false

#i-[0;99] Amount of pixels the icons will scroll at each wheel scroll;
# If you put 0, this will make them scroll of exactly one icon each time.
scroll amount = 0

#b- Re-center the dock on leaving it ?
reset scroll = true

#e-[0.;0.99] If so, you can specify the scrolling acceleration :
# (the more it's close to 0, the faster the scroll will be)
reset scroll acceleration = .9

#F[Wave's shape]
frame2 =
#f[0;5] Crest of the wave (the maximum zoom will be 1+C) :
amplitude = 1.0

#i[1;999] Width of the interval in which the wave will be effective (in pixels).
# Outside of this interval (centered on the mouse), the wave is flat:
sinusoid width = 300

#F[Extern Frame]
frame3 =
#i[0;30] Corner radius, in pixels: /
corner radius = 10

#i-[0;20] Linewidth of the extern line, in pixels: /
line width = 2

#c4[0;1] Color of the extern line (red, blue, green, alpha):
line color = 0.0; 0.0; 0.8; 0.4

#b- Are the bottom left and right corners rounded ?
rounded bottom corner = true

#F[Link the icons with a string]
frame4 =

#i-[0;20] Linewidth of the string, in pixels (0 to not use string): /
string width = 0

#c4[0;1] Color of the string (red, blue, green, alpha):
string color = 0.0; 0.0; 0.8; 0.4

#F-[Movement speed and acceleration]
frame5 =

#e-[0.;12.] Icons' lateral unfolding acceleration, regarding the alignement point.
# The icons will appear folded on themselves, then will unfold untill they fill the whole dock.
# Use 0 to not use unfolding, the more it's close to 0, the faster it will be :
unfold factor = 0

#f-[1.01;3] Icon's resize factor at each step (grow up, shrink down).
# After n steps, the maximum icon zoom will be 1 + A * f^n.
grow up factor = 1.45
#f-[0.01;0.99] ...
shrink down factor = 0.75

#f-[0.1;0.9] Window's move acceleration,
# in percentage of the distance it can move at each step (move up, move down).
# After n steps, the remaining distance will be reduced by (1-s)^n.
move up speed = 0.35
#f-[0.1;0.9] ...
move down speed = 0.25

#i-[5;40]Refresh frequency when mouving cursor into the dock,
# to adjust regarding your CPU power :
# (for information, movies' frequency is around 25) (in Hz):
refresh frequency = 25

[Sub-Docks]

#b
# Are the sub-docks parallel to main docks ? (otherwise they will be perpendicular) :
same horizontality = true

#e[0.1;1.] You can specify a ratio for the size of the sub-docks' icons,
# regarding the main docks' icons size :
relative icon size = 1.

#b Show sub-dock when mouse goes over the icon ?
# (otherwise you will have to click on it to make the sub-dock appear)
on mouse over = true

[Labels]

#F[Style of the labels]
frame1 =

#i[0;40] Size of the police (approximately size in pixels, put 0 to not display labels):
size = 14

#s Family of the police used for labels (for exemple "monospace", "sans", ...):
police = sans

#i-[1;9] Weight (between 1 and 9, the bigger, the heavier):
weight = 5

#b- Should be italic ?
italic = false

#F
frame1_ =

#b Show label of the currently pointed icon only ?
pointed icon only = false

#b- Should the labels be always horizontal, even when dock is vertical ? /
always horizontal = FALSE

#f-[5.;30.] label's visibility threshold;
# the bigger, the more the labels next to the pointed icon will be transparent :
alpha threshold = 10.

[Background]

#e-[0;1]
#Scroll speed factor for background decorations. The smaller, the lower the decorations will move with the cursor
# (at 1  they will follow the cursor, at 0 they will be static)
scroll speed factor = 0.5

#F[Background image]
frame1 = 

#S image's filename (nothing if you don't want to use an image as background) :
background image = 

#e[0;1] Image's transparency :
image alpha = 0.5

#b Repeat image as a pattern to fill background ?
repeat image = true

#F[Gradation]
frame2 = 

#c4[0;1] Bright color (red, green, blue, alpha):
stripes color bright = 0.933; 0.933; 0.925; 0.4

#c4[0;1] Dark color (red, green, blue, alpha):
stripes color dark = 0.827; 0.843; 0.811; 0.6

#f-[-90;90] Angle of the stripes / gradation, in relation to the vertical (in degree):
stripes angle = 30.

#i Number of stripes, in each pattern, to draw in the background.
# The bigger, the more the stripes are close to each other;
# with 0 stripes, the background will be filled with a single gradation :
number of stripes = 15

#f[0;1] Width of the stripes, in percentage of the pattern size
# (1 pattern contains N stripes, so the width can be less or equal than 1/N):
stripes width = 0.03

[Launchers]

#F[Generic]
frame1 =

#i Minimum and maximum size that the icons can have (at rest),
# or 0 if you don't want to restrain them :
min icon size = 0
#i ...
max icon size = 0

#s[bounce;rotate;blink;pulse;random] Animation type when clicked :
animation type = bounce

#i Number of times the icon will bounce/rotate/blink/etc when clicked:
number of animation rounds = 4

#F
frame1_ = 

#s Icons theme name to use, or nothing if you want to use the default theme of your system.
# This theme must have been installed.
icon theme = gnome

#D99
# Directories where to search icons before searching in the chosen icons theme.
# Put some directories where you have icons you wish to see in the dock
# in preference to the icons of the icons' theme. (the order is taken into account during the research) :
default icon directory = _ThemeDirectory_

[Applications]

#F[Generic]
frame1 =

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size = 0
#i ...
max icon size = 48

#s[bounce;rotate;blink;pulse;random] Animation type when clicked :
animation type = rotate

#i Number of times the icon will bounce/rotate/blink/etc when clicked.
number of animation rounds = 2

#F
frame1_ = 

#b
# Show the current applications in the dock ?
show applications = true

#b- Should the applications with same PID be displayed only once ?
unique PID = false

#i- Maximum number of caracters in application's name ("..." will be added at the end if the name is too long)
max name length = 15

[Applets]

#F[Generic]
frame1 =

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size = 0
#i ...
max icon size = 0

#s[bounce;rotate;blink;pulse;random] Animation type when clicked :
animation type = blink

#i Number of times the icon will bounce/rotate/blink/etc when clicked.
number of animation rounds = 1

#F
frame1_ = 

#s99[]
# List of active plug-ins (applets and others).
active modules = cd_clock;cd_dustbin

[Separators]

#F[Generic]
frame1 =

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size = 0
#i ...
max icon size = 0

#F
frame1_ = 

#S
# Path to an image to use for separators. If you don't provide one, separators won't be used.
separator image = separateur.svg

#b- Make the separator's image revolve when dock is on top/on the left/on the right ?
revolve separator image = true
