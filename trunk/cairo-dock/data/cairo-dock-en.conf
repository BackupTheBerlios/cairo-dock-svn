#!en;1.4.5
######## This is the conf file of cairo-dock, released under the GPL.##########
######## It is parsed by cairo-dock to automatically generate an appropriate GUI,##########
######## so don't mess into it, except if you know what you're doing ! ;-)##########

[Position]

#F-[Position on the screen]
frame1 =

#r-[bottom;top;left;right] Choose the screen border regarding to which the dock will place itself :
#{The icons will scroll according to the chosen placement type.
# Of course the dock can be placed anywhere on the screen, here we specify regarding to what}
screen border = bottom

#e-[0.;1.] Relative alignment :
#{At 0, the dock will place itself regarding the left corner if horizontal and the top corner if vertical,
# at 1 regarding the right corner if horizontal and the bottom corner if vertical,
# and at 0.5, regarding the middle of the screen's edge}
alignment = .5

#F-[Position regarding the chosen screen's edge]
frame2 =

#i-[-1024;1024] Gap from the absolute position on the screen's edge :
x gap = 0
#i-[-20;2000] Distance to the screen's edge:
y gap = 25

#F-
frame2_ = 

#b-
# Should the window reserve space at the edge of the screen for itself only ?
#{This will prevent other windows from overlapping the dock.}
reserve space = false

[Auto-Hide]

#b-
#Activate auto-hide ?
#{The dock will automatically hide itself outside of the scren when the mouse leaves it
# and will show a callback zone instead.
#Placing the mouse into this zone will make the dock re-appear.}
auto-hide = false

#F+[Callback zone]
frame1 =

#i+ Size of the callback zone, (width x height, in pixels) :
zone width = 200
#i+ ...
zone height = 20

#S+ Filename of an image to put on the zone as background :
#{Any format allowed; let this field empty to have an invisible callback zone.}
background image = background-cairo-dock.svg

#e+[0;1] Alpha used to render the callback zone's background:
alpha = 0.5

#b+ Rotate the callback zone's image when the dock is on top/left/right ?
#{Use it when the image is an arrow pointing to the center of the screen for exemple}
reverse visible image = true

[Cairo Dock]

#F-[Language]
frame1 =

#s-[] Select your language (for config panels) :
#{press 'OK' and re-open the window}/
language = en

#F[Representation]
frame2 =

#T-3[launchers;applications;applets] Order of the different types of icons :
icon's type order = launchers;applications;applets

#R+1[default] Choose the default view for main dock :
main dock view = default

#F-[Movement parameters]
frame3 =

#e-[0.;12.] Icons' lateral unfolding acceleration, regarding the alignement point :
#{The icons will appear folded on themselves, then will unfold untill they fill the whole dock.
# Use 0 to not use unfolding, the more it's close to 0, the faster it will be}
unfold factor = 0

#I-[5;50] Number of steps for icons' resizing (grow up/shrink down) :
#{The more there are, the slower it will be}
grow up steps = 10
#I-[5;50] ...
shrink down steps = 12

#f-[0.1;0.9] Window's move acceleration,
#{in percentage of the distance it can move at each step (move up, move down).
# After n steps, the remaining distance will be reduced by (1-s)^n.}
move up speed = 0.35
#f-[0.1;0.9] ...
move down speed = 0.25

#i-[5;40]Refresh frequency when mouving cursor into the dock :
#{This is to adjust regarding your CPU power}
refresh frequency = 35

[Sub-Docks]

#F[Representation]
frame1 =

#R+1[default]
# Choose the default view for sub-docks :
sub-dock view = default

#b+ Are the sub-docks parallel to main docks ? (otherwise they will be perpendicular) :
same horizontality = true

#e+[0.1;1.] You can specify a ratio for the size of the sub-docks' icons,
# regarding the main docks' icons size :
relative icon size = 1.

#F[Behaviour]
frame2 =

#b+ Animate sub-docks when they appear ? /
animate subdocks = true

#i- Delay before you effectively leave from a sub-dock (in ms) :
leaving delay = 250

#i- Delay before displaying a sub-dock (in ms) :
show delay = 300

[Labels]

#F+[Style of the labels]
frame1 =

#i+[0;40] Size of the font :
#{approximately size in pixels, put 0 to not display labels}
size = 14

#P+ Family of the font used for labels :
#{for exemple Monospace, Purisa, ... Just write the font name wihtout any number or so.}
police = Sans

#i+[1;9] Weight (between 1 and 9, the bigger, the heavier):
weight = 5

#b+ Should be italic ?
italic = false

#F+
frame1_ =

#b- Show label of the currently pointed icon only ?
pointed icon only = false

#b- Should the labels be always horizontal, even when dock is vertical ? /
always horizontal = FALSE

#f-[5.;40.] label's visibility threshold :
#{the bigger, the more the labels next to the pointed icon will be transparent}
alpha threshold = 10.

[Background]

#F+[Extern Frame]
frame4 =
#i+[0;30] Corner radius, in pixels: /
corner radius = 10

#i+[0;20] Linewidth of the extern line, in pixels: /
line width = 2

#i+[0;20] Margin between the frame and the icons or their reflects, in pixels : /
frame margin = 2

#c+4[0;1] Color of the extern line (red, blue, green, alpha):
line color = 0.0; 0.0; 0.8; 0.4

#b+ Are the bottom left and right corners rounded ?
rounded bottom corner = true

#i-[0;9999] Maximum width that can have the dock :
#{You can scroll with the mouse's wheel to make the icons scroll, like a carousel.
# If you put 0, the dock will automatically adapt itself to the desktop's size.}
max autorized width = 0

#F+[Background image...]
frame2 = 

#S+ image's filename (let it empty if you don't want to use an image as background) :
background image = 

#e+[0;1] Image's transparency :
image alpha = 0.5

#b+ Repeat image as a pattern to fill background ?
repeat image = true

#F+[...or Gradation]
frame3 = 

#c+4[0;1] Bright color (red, green, blue, alpha):
stripes color bright = 0.933; 0.933; 0.925; 0.4

#c+4[0;1] Dark color (red, green, blue, alpha):
stripes color dark = 0.827; 0.843; 0.811; 0.6

#f+[-90;90] Angle of the stripes / gradation, in relation to the vertical (in degree) :
stripes angle = 30.

#i+ Number of stripes, in each pattern, to draw in the background :
#{The bigger, the more the stripes are close to each other;
# with 0 stripes, the background will be filled with a single gradation.}
number of stripes = 15

#f+[0;1] Width of the stripes, in percentage of the pattern size :
#{1 pattern contains N stripes, so the width can be less or equal than 1/N.}
stripes width = 0.03

#F[Scrolling]
frame1 = 

#e+[0;1]
#Scroll speed factor for background decorations.
#{The smaller, the lower the decorations will move along with the cursor.
# At 0 they will be static.}
scroll speed factor = 0.5

#b- Should the decorations be enslaved to the cursor ?
#{otherwise the amount of movement of the decorations will only depend on 
#  the direction of the cursor's movement, as if the decorations were "gliding".}
decorations enslaved = true

[Icons]

#F[Reflections]
frame1 =

#e+[0;1] Field depth of the view:
#{More precisely, it is the fraction of the max icon height that will be used to draw reflect.
# So setting it to 0.33 will mean that 33% of the icons will reflect on the ground, and the icons will be placed at the right distance from the front border of the frame so that the reflect is fully visible.}/
field depth = 0.5

#e+[0;1] Reflecting power of the plane :
#{It is its albedo; at 1 the icons reflect to the maximum, at 0 there is no reflect.}/
albedo = 1

#b- Reflcetions should be calculated in real-time ?
#{The transparency gradation pattern will then be re-calculated in real time.
# Attention, this needs CPU power !}/
dynamic reflection = false

#F+[Wave's shape]
frame2 =
#f+[0;5] Crest of the wave :
#{the maximum zoom will be 1+C.}
amplitude = 1.0

#i+[1;999] Width of the interval in which the wave will be effective (in pixels) :
#{Outside of this interval (centered on the mouse), the wave is flat}
sinusoid width = 300

#i+[0;50] Space between icons (in pixels) :
icon gap = 0

#F+[Link the icons with a string]
frame3 =

#i+[0;20] Linewidth of the string, in pixels (0 to not use string): /
string width = 0

#c+4[0;1] Color of the string (red, blue, green, alpha):
string color = 0.0; 0.0; 0.8; 0.4

#F+
frame3_ =

#e+[0;1]
#Icons' transparency at rest :
#{It is their transparency when they are "small"; they will "materialize" progressively as the dock grows up.
# The closer to 0, the more transparent they will be.}/
alpha at rest = 1

#F[Icon's scrolling]
frame4 = 

#i-[0;99] Amount of pixels the icons will scroll at each wheel scroll :
#{If you put 0, this will make them scroll of exactly one icon each time.}
scroll amount = 0

#b+ Re-center the dock on leaving it ?
reset scroll = true

#e+[0.;0.99] If so, you can specify the scrolling acceleration :
#{the more it's close to 0, the faster the scroll will be}
reset scroll acceleration = .9

[Launchers]

#F+[Generic]
frame1 =

#i+ Minimum and maximum size that the icons can have (at rest),
# or 0 if you don't want to restrain them :
min icon size = 0
#i+ ...
max icon size = 0

#r+[bounce;rotate;blink;pulse;upside-down;wobbly;random] Animation type when clicked :
animation type = bounce

#i+ Number of times the icon will bounce/rotate/blink/etc when clicked:
number of animation rounds = 4

#F+
frame1_ = 

#s+ Icons theme name to use, or nothing if you want to use the default theme of your system :
#{This theme must have been installed.
# Let this empty if you want to use your system icons' theme (it's the one you can see in Nautilus or Konqueror for exemple).}
icon theme = gnome

#D+99
# Directories where to search icons before searching in the chosen icons theme :
#{Put some directories where you have icons you wish to see in the dock
# in preference to the icons of the icons' theme. (the order is taken into account during the research)
# The key word _ThemeDirectory_ represents the directory ~/.cairo-dock/current_theme/launchers}
default icon directory = _ThemeDirectory_

[Applications]

#F+[Generic]
frame1 =

#i+ Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size = 0
#i+ ...
max icon size = 48

#r+[bounce;rotate;blink;pulse;upside-down;wobbly;random] Animation type when clicked :
animation type = rotate

#i+ Number of times the icon will bounce/rotate/blink/etc when clicked.
number of animation rounds = 2

#F-[TaskBar's behaviour]
frame2 =

#b- Show the current applications in the dock ? /
#{Cairo-Dock will then replace your taskbar.
# It is recommanded to remove any other taskbar, and to not force the dock's type to normal.}/
show applications = true

#b- Should the applications with same PID be displayed only once ? /
unique PID = false

#b- Should the applications with same class be grouped in a sub-dock ? /
#{This allows to group windows in some soft like Gimp, and to have only 1 icon in the main dock.
#The 1st window will appear in the main dock, and the others will be placed in a container associated with this 1st icon.} /
group by class = FALSE

#i- Maximum number of caracters in application's name :
#{"..." will be added at the end if the name is too long.}
max name length = 15

#b- Minimize the window when its icon is clicked, if it was already the active window ? 
#{It is the default behaviour of most of taskbars.}/
minimize on click = true

#b- Signal the applications demanding your attention with a dialog tip ? /
demands attention with dialog = true

#b- Signal the applications demanding your attention with an animation ? /
demands attention with dialog animation = true

#b- Play a short animation of the icon when its window becomes active ? /
animate on active window = true

[Applets]

#F+[Generic]
frame1 =

#i+ Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size = 0
#i+ ...
max icon size = 0

#r+[bounce;rotate;blink;pulse;upside-down;wobbly;random] Animation type when clicked :
animation type = blink

#i+ Number of times the icon will bounce/rotate/blink/etc when clicked.
number of animation rounds = 1

#F+
frame1_ = 

#R-999[]
# List of active plug-ins (applets and others).
#{To configure a plug-in, activate it, then right click on its icon. Some plug-in don't have icon, so use right click->cairo-dock->configure->modules}
active modules = cd_clock;cd_dustbin

[Separators]

#F+[Generic]
frame1 =

#i+ Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size = 0
#i+ ...
max icon size = 0

#F+
frame1_ = 

#S+
# Path to an image to use for separators :
#{If you don't provide one, separators won't be used.}
separator image = separateur.svg

#b+ Make the separator's image revolve when dock is on top/on the left/on the right ? /
revolve separator image = true
