#!
######## This is the conf file of cairo-dock, released under the GPL.##########
######## It is parsed by cairo-dock to automatically generate an appropriate GUI,##########
######## so don't mess into it, except you know what you're doing ! ;-)##########

[POSITION]

#F[]
frame1=Gap from the middle bottom point of the screen
#i[-1024;1024] X Gap :
x gap=0
#i[-20;2000] Y Gap :
y gap=25
#F
frame1_=

#b Do the icons grow upward with text above and dock hiding downward ? (otherwise the opposite)
unroll upward=true

[AUTO-HIDE]

#b
# Automatically hide the dock when mouse leaves it and show a callback zone instead ?
auto-hide=true

#i Size of the callback zone, where to put the cursor to call back the dock (width x height):
zone width=200
#i ...
zone height=20

#S Filename of an image to put on the zone as background, or nothing if you want to let it blank:
background image=background-ubuntu.png

#f[0;1] Alpha used to render the callback zone's background:
alpha=0.5

[CAIRO DOCK]

#F[]
frame1=Wave's shape
#f[0;5] Amplitude of the sinusoid (the scale factor will be of the form of 1 + A * sin (phi):
amplitude=1

#i Width of the interval in which the sinusoid will be effective.
# Outside of this interval (centered on the mouse), the sinusoid is flat:
sinusoid width=300

#F[]
frame2=Extern Frame
#i[0;30] Corner radius, in pixels:
corner radius=10

#i[0;20] Linewidth of the extern line, in pixels:
line width=3

#f4[0;1] Color of the extern line (red, blue, green, alpha):
line color=0.80000000000000004;0.57999999999999996;0.23999999999999999;1;

#b Are the bottom left and right corners rounded ?
rounded bottom corner=false

#F[Movement speed and acceleration]
frame3=Movement speed and acceleration
#f[1.01;3] Icon's resize factor at each step. After n steps, the maximum icon zoom will be 1 + A * f^n.
grow up factor=1.45
#f[0.01;0.99] ...
shrink down factor=0.65000000000000002
#f[0.1;0.9] Window's move speed, in percentage of the distance it can move at each step (between 0+ and 1).
# After n steps, the remaining distance will be reduced by (1-s)^n.
move up speed=0.34999999999999998
#f[0.1;0.9] ...
move down speed=0.25

#i[5;40]Refresh frequency when mouving cursor into the dock
# (for information, movies' frequancy is around 25) (in Hz):
refresh frequency=25

[LABELS]

#b
# Write the labels above the icons ?
with labels=true

#b Show label of the currently pointed icon only ?
pointed icon only=true

#F[]
frame1=Style of the labels.
#s Family of the police used for labels (for exemple "monospace", "sans", ...):
police="sans"

#i Size of the chars (size of the police, approximately size in pixels):
size=16

#i[1;9] Weight (between 1 and 9, the bigger, the heavier):
weight=7

#b Should be italic ?
italic=true

[BACKGROUND]

#F[]
frame1=Colors for background
#f4[0;1] Bright color (this is actually the background color). (red, green, blue, alpha):
stripes color bright=0.90000000000000002;0.56000000000000005;0.20000000000000001;0.40000000000000002;
#f4[0;1] Dark color (this is actually the stripes color).  (red, green, blue, alpha):
stripes color dark=0.90000000000000002;0.56000000000000005;0.20000000000000001;1;

#F
frame1_=

#f
#Scroll speed factor for background decorations. The bigger, the lower the decorations will move with the cursor
# (put 1 to make decorations follow the cursor, 2 to make them 2 times lower, etc)
scroll speed factor=2

#i Number of stripes, in each pattern, to draw in the background (0 for an empty background).
# The bigger, the more the stripes are close to each other:
number of stripes=20

#f[0;1] Width of the stripes, in percentage of the pattern size
# (1 pattern contains N stripes, so the width can be less or equal than 1/N):
stripes width=0.015

#f[0;80] Angle of the stripes, in relation to the vertical (in degree):
stripes angle=45

[LAUNCHERS]

#F[]
frame1=Generic

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size=0
#i ...
max icon size=0

#s[bounce;rotate;blink;random] Animation type when clicked :
animation type=bounce

#i Number of times the icon will bounce/rotate/blink/etc when clicked:
number of animation rounds=4

#F
frame1_=

#D99
# Directories where to search icon if not found in the .cairo-dock directory
# (the order will be taken into account during research, the .cairo-dock directory will prevail on them):
default icon directory=/usr/share/app-install/icons;/usr/share/pixmaps;/usr/share/icons/gnome/scalable/apps;

#s
#Name of the file browser that will be used to open shortcuts you add to the dock:
default file browser=nautilus

[APPLICATIONS]

#F[]
frame1=Generic

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size=0
#i ...
max icon size=48

#s[bounce;rotate;blink;random] Animation type when clicked :
animation type=rotate

#i Number of times the icon will bounce/rotate/blink/etc when clicked.
number of animation rounds=2

#F
frame1_=

#b
# Show the current applications in the dock ?
show applications=true

#b Should the applications with same PID be displayed only once ?
unique PID=false

#i Maximum number of caracters in application's name ("..." will be added at the end if the name is too long)
max name length=15

[APPLETS]

#F[]
frame1=Generic

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size=0
#i ...
max icon size=0

#s[bounce;rotate;blink;random] Animation type when clicked :
animation type=blink

#i Number of times the icon will bounce/rotate/blink/etc when clicked.
number of animation rounds=1

#F
frame1_=
#s99[cd_dustbin;cd_clock]
# List of active plug-ins (applets and others).
active modules=cd_clock;cd_dustbin;

[SEPARATORS]

#F[]
frame1=Generic

#i Minimum and maximum size that the icons can have (taken when they are small),
# or 0 if you don't want to restrain them :
min icon size=0
#i ...
max icon size=0

#F
frame1_=

#S
# Path to an image to use for separators. If you don't provide one, an image will be created by default.
separator image=separateur.svg
