#!fr;1.4.5
######## Ceci est le fichier de conf de Cairo-Dock, placé sous license GPL.##########
######## Il est interprété par Cairo-Dock pour générer automatiquement une IHM appropriée,##########
######## donc évitez d'y toucher, sauf si vous savez ce que vous faites ! ;-)##########

[Position]

#F-[Positionnement sur l'écran]
frame1=

#r-[bas;haut;gauche;droit] Choisissez par rapport à quel bord de l'écran le dock doit se placer :
#{Les icônes se dérouleront en accord avec le type de placement choisi.
# Le dock peut bien sûr se placer n'importe où sur l'écran, ici il s'agit de préciser par rapport à quoi}
screen border=0

#e-[0.;1.] Alignement relatif :
#{A 0, le dock se placera relativement au coin gauche à l'horizontal (coin haut à la verticale),
# à 1 relativement au coin droit à l'horizontal (coin bas à la verticale),
# et à 0.5 relativement au milieu du bord de l'écran}
alignment=0.504

#F-[Positionnement par rapport au bord de l'écran choisi]
frame2=

#i-[-2000;2000] Ecart latéral :
#{Ecart par rapport à la position absolue précédemment définie le long du bord de l'écran, en pixels.}
x gap=0
#i-[-20;2000] Distance au bord de l'écran (en pixels) :
#{en pixels.}
y gap=0

#F-
frame2_=

#b-
# Reserver l'espace au bord de l'écran pour le dock ?
#{Cela empêchera les autres fenêtres de recouvrir le dock.}
reserve space=false

[Auto-Hide]

#b-
#Activer le cachage automatique ?
#{Le dock se cachera automatiquement hors de l'écran quand la souris le quittera,
# et montrera une zone de rappel à sa place.
# Placer la souris dans cette zone fera ré-apparaître le dock.}
auto-hide=true

#F+[Zone de rappel]
frame1=
#i+ Taille de la zone de rappel (largeur x hauteur, en pixels) :
#{Placer la souris dans cette zone fera ré-apparaître le dock.}
zone width=500
#i+ ...
zone height=10

#S+ Nom de fichier d'une image à mettre en fond de la zone de rappel :
#{Tous formats acceptés; laisser ce champ vide si vous voulez une zone de rappel invisible}
background image=background-cairo-dock.svg

#e+[0;1] Transparence utilisée pour le rendu de la zone de rappel :
alpha=0.76500000000000001

#b+ Faire tourner l'image de la zone de rappel lorsque le dock est en haut/à gauche/à droite ?
#{A utiliser lorsque l'image est une flèche pointant vers le centre de l'écran par exemple}
reverse visible image=false

[Cairo Dock]

#F[Représentation]
frame2=
#R+1[Caroussel;/usr/share/cairo-dock/plug-in/rendering/readme-caroussel-view;3D plane;/usr/share/cairo-dock/plug-in/rendering/readme-3D-plane-view;default;/usr/share/cairo-dock/readme-basic-view]  Choisissez la vue par défaut à utiliser pour le dock principal :/
main dock view=3D plane

#T-3[launchers;applications;applets] Ordre des differents types d'icônes :
icon's type order=applications;launchers;applets;

#F-[Caractéristiques du mouvement]
frame3=

#e-[0.;12.] Acceleration de depliage lateral des icones, par rapport au point d'alignement :
#{les icônes apparaitront repliees sur elles-mêmes, puis se déplieront jusqu'a remplir tout le dock.
# Mettre 0 pour ne pas utiliser le dépliage, plus c'est proche de 0, plus c'est rapide.}
unfold factor=1.774

#I-[5;50] Nombre d'étapes dans le redimensionnement des icônes (grossissement/rétrecissement) :
#{Plus il y'en a, plus celui-ci sera lent}
grow up steps=5
#I-[5;50] ...
shrink down steps=12

#f-[0.1;0.9] Acceleration du mouvement de la fenêtre lors de l'auto-hide :
#{en pourcentage de la distance pouvant être parcourue à chaque étape (montée, descente).
# Après n étapes, la distance restante sera réduite par (1-a)^n}
move up speed=0.34999999999999998
#f-[0.1;0.9] ...
move down speed=0.25

#i-[5;40]Fréquence de rafraîchissement lorsqu'on bouge le curseur dans le dock,
#{Ceci est à ajuster en fonction de la puissance du processeur}
refresh frequency=35

[Sub-Docks]

#F[Représentation]
frame1=
#R+1[Caroussel;/usr/share/cairo-dock/plug-in/rendering/readme-caroussel-view;3D plane;/usr/share/cairo-dock/plug-in/rendering/readme-3D-plane-view;default;/usr/share/cairo-dock/readme-basic-view] 
# Choisissez la vue par défaut à utiliser pour les sous-docks :/
sub-dock view=Caroussel

#b+ Les sous-docks sont-ils parallèles aux docks principaux ? (sinon ils seront perpendiculaires) :
same horizontality=true

#e+[0.1;1.] Vous pouvez spécifier un ratio de la taille des icônes des sous-docks
# par rapport à celles des docks principaux :
relative icon size=0.80000000000000004

#F[Comportement]
frame2=

#b+ Animer les sous-docks lors de leur apparition ?
animate subdocks=true

#i- Délai avant de sortir effectivement d'un sous-dock (en ms) :
leaving delay=250

#i- Délai avant l'affichage d'un sous-dock (en ms) :
show delay=300

[Labels]

#F+[Style des étiquettes]
frame1=

#i+[0;40] Taille de la police :
#{approximativement la taille en pixels, mettre 0 pour ne pas afficher les étiquettes}
size=14

#P+ Police de caractères utilisée pour les étiquettes :
#{par exemple Monospace, Purisa, ... Ecrivez juste le nom de la police, sans aucun chiffre ou autre}
police=Purisa Bold 13

#i+[1;9] Poids (entre 1 et 9, plus c'est élevé, plus les traits sont épais):
weight=9

#b+ Le texte est-il en italique ?
italic=false

#F+
frame1_=

#b- Les etiquettes doivent être toujours horizontales, même quand le dock est vertical ?
always horizontal=true

#b- Ne montrer que l'étiquette de l'icône pointée ?
pointed icon only=true

#f-[5.;40.] Seuil de visibilité des étiquettes :
#{plus la valeur est élevée, plus les étiquettes à côté de l'icône pointée sont transparentes}
alpha threshold=10


[Background]

#F+[Cadre extérieur]
frame4=
#i+[0;30] Rayon des coins, en pixels :
corner radius=25

#i+[0;20] Epaisseur du cadre, en pixels :
line width=2

#i+[0;20] Marge entre le cadre et les icônes ou leur reflets, en pixels :
frame margin=0

#c+4[0;1] Couleur du cadre (rouge, vers, bleu, alpha):
line color=1;0.03218127718013275;0;0.84313725490196079;

#b+ Les coins du bas sont-ils arrondis aussi ?
rounded bottom corner=true

#i-[0;9999] Largeur maximale que peut avoir le dock :
#{Vous pourrez scroller avec la molette de la souris pour faire défiler les icônes.
# Si vous mettez 0, le dock s'adaptera automatiquement à la taille du bureau.}
max autorized width=0

#F+[Image de fond...]
frame2=

#S+ Nom du fichier de l'image :
#{Tous formats acceptés; laisser ce champ vide si vous ne voulez pas utiliser une image en fond.}
background image=

#e+[0;1] Transparence de l'image :
image alpha=0

#b+ Répéter l'image comme un motif pour remplir le fond ?
repeat image=false

#F+[...ou Dégradé]
frame3=

#c+4[0;1] Couleur claire (rouge, vert, bleu, alpha):
stripes color bright=0.092378118562600142;0.31773861295490957;0.057129777981231401;1;

#c+4[0;1] Couleur foncée (rouge, vert, bleu, alpha):
stripes color dark=0.05722133211261158;0.42308690012970168;0;1;

#f+[-90;90] Angle d'inclinaison du dégradé / des rayures, par rapport à la verticale (en degrés) :
stripes angle=90

#i+ Nombre de rayures, dans chaque motif, à dessiner dans le fond :
#{Plus c'est élevé, plus les rayures seront proches les unes des autres.
# Avec 0 rayures, un dégradé unique remplira tout le fond.}
number of stripes=1

#f+[0;1] Largeur des rayures, en pourcentage de la taille d'un motif :
#{1 motif contient N rayures, donc la largeur peut être inférieure ou égale à 1/N.}
stripes width=1

#F[Défilement des décorations]
frame1=
#e+[0;1]
#Facteur de vitesse de défilement pour les décorations du fond :
#{Plus c'est proche de 0, plus les décorations se déplaceront lentement avec le curseur
# A 0 elles seront immobiles.}
scroll speed factor=0

#b- Les décorations doivent-elles être asservies au curseur ?
#{sinon le delta de deplacement des décorations ne dépendra que de la direction
#  du mouvement du curseur, un peu comme si les décorations "glissaient".}
decorations enslaved=false

[Icons]

#F[Reflets]
frame1=

#e+[0;1]
#Profondeur de champ de la vue :
#{Plus précisement, c'est la fraction de la hauteur max des icônes qui sera utilisée pour dessiner le reflet.
# Donc mettre 0.33 signifie que 33% des icônes se reflèteront sur le sol, et les icônes se placeront à la bonne distance du bord inférieur du cadre afin que le reflet soit entièrement visible.}
field depth=0.69999999999999996

#e+[0;1]
#Pouvoir réflechissant du plan incliné :
#{C'est son albédo; à 1 les icônes se reflètent au maximum, à 0 il n'y a pas de reflet (ils sont alors désactivés).}
albedo=0.59999999999999998

#b- Les reflets doivent-ils être recalculés en temps réel ?
#{Le motif de dégradé en transparence sera alors recalculé en temps réel.
# Attention, cela consomme du CPU !}
dynamic reflection=false

#F+[Forme de la vague]
frame2=
#f+[0;5] Crête de la vague :
#{le zoom maximal sera de 1+C.}
amplitude=2

#i+[1;999] Largeur de l'intervalle dans lequel la vague sera effective (en pixels) :
#{En dehors de cet intervalle (centré sur le curseur), la vague sera plate}
sinusoid width=120

#i+[0;50] Espace entre les icônes (en pixels) :
icon gap=0

#F+[Relier les icônes avec une ficelle]
frame3=

#i+[0;20] Epaisseur de la ficelle, en pixels (0 pour ne pas avoir de ficelle) :
string width=0

#c+4[0;1] Couleur de la ficelle (red, blue, green, alpha):
string color=0;0;0.59999999999999998;0.40000000000000002;

#F+
frame3_=

#e+[0;1]
#Transparence des icônes au repos :
#{C'est leur transparence lorsqu'elles sont "petites"; elles se "matérialiseront" progressivement au fur et à mesure que le dock grandit.
# Plus c'est proche de 0, plus elles seront transparentes.}
alpha at rest=1

#F[Défilement des icônes]
frame4=

#i-[0;99] De combien de pixels les icônes vont défiler à chaque coup de molette :
#{Si vous mettez 0, cela les fera défiler d'une icône exactement à chaque fois}
scroll amount=0

#b+ Recentrer le dock en quittant ?
reset scroll=true

#e+[0.;0.99] Si oui, vous pouvez spécifier l'accélération du défilement :
#{plus c'est proche de 0, plus le défilement sera rapide}
reset scroll acceleration=0.90000000000000002

[Launchers]

#F+[Générique]
frame1=

#i+ Taille minimale et maximale que les icônes peuvent avoir (au repos) :
# ou 0 si vous ne voulez pas les restreindre :
min icon size=48
#i+ ...
max icon size=48

#r+[rebond;rotation;clignotement;pulsation;sens dessus dessous;élastique;aléatoire] Type d'animation lorsqu'elles sont cliquées :
animation type=1

#i+ Nombre de fois où l'icône va rebondir/tourner/clignoter/etc :
number of animation rounds=6

#F+
frame1_=

#s+ Nom du thème d'icônes à utiliser  :
#{Ce thème doit avoir été installé.
# Laissez vide pour utiliser le thème par défaut de votre système (c'est celui que vous voyez dans Nautilus ou Konqueror par exemple).}
icon theme=

#D+99
# Répertoires d'icônes prioritaires :
#{Répertoires où chercher les icônes avant d'aller chercher dans le thème d'icônes choisi.
# Mettez-y des répertoires où vous avez des icônes que vous souhaitez voir dans le dock
# de préférence aux icônes du thème d'icônes. (L'ordre est pris en compte durant la recherche)
# Le mot clé _ThemeDirectory_ représente le répertoire ~/.cairo-dock/current_theme/launchers}
default icon directory=_ThemeDirectory_


[Applications]

#F+[Générique]
frame1=

#i+ Taille minimale et maximale que les icônes peuvent avoir (au repos) :
# ou 0 si vous ne voulez pas les restreindre :
min icon size=48
#i+ ...
max icon size=48

#r+[rebond;rotation;clignotement;pulsation;sens dessus dessous;élastique;aléatoire] Type d'animation lorsqu'elles sont cliquées :
animation type=4

#i+ Nombre de fois où l'icône va rebondir/tourner/clignoter/etc :
number of animation rounds=4

#F-[Comportement de la barre des tâches]
frame2=

#b- Montrer les applications actuellement ouvertes dans le dock ?
#{Cairo-Dock remplace alors votre barre des tâches.
# Il est recommandé de supprimer toute autre barre des tâches, et de ne pas forcer le type du dock à normal}
show applications=true

#b- Les applications avec le même PID ne devraient être affichées qu'une seule fois ?
unique PID=false

#b- Les applications avec la même classe doivent-elles être groupées dans un sous-dock ?
#{Cela permet de grouper les fenêtres de logiciels tels que Gimp, et de n'avoir qu'une seule icône dans le dock principal.
#La 1ère fenêtre sera dans le dock principal, et les autres seront dans un container associé à cette 1ère icône}
group by class=true

#i- Nombre maximum de caractères dans le nom des applications :
#{"..." seront ajoutés si le nom est trop long.}
max name length=9

#b- Minimiser la fenêtre lors d'un clique sur son icône, si elle était déjà la fenêtre active ? 
#{C'est le comportement par défaut de la plupart des barres de tâches.}
minimize on click=true

#b- Clique du milieu sur une icône ferme l'application correspondante ?
#{A la manière des onglets sous Firefox.}
close on middle click=true

#b- Activer le cachage-rapide automatiquement quand une fenêtre passe en plein écran ?
#{Cela n'est utile que si vous n'avez pas déjà l'auto-hide, et que votre WM laisse le dock devant les fenêtres plein écran.}
auto quick hide=true

#b- Signaler les fenêtres demandant votre attention par une bulle de dialogue ?
demands attention with dialog=true

#b- Signaler les fenêtres demandant votre attention par une animation ?
demands attention with animation=false

#b- Jouer une breve animation de l'icone lorsque la fenetre correspondante devient active ?
animate on active window=false

[Applets]

#F+[Générique]
frame1=

#i+ Taille minimale et maximale que les icônes peuvent avoir (au repos) :
# ou 0 si vous ne voulez pas les restreindre :
min icon size=48
#i+ ...
max icon size=48

#r+[rebond;rotation;clignotement;pulsation;sens dessus dessous;élastique;aléatoire] Type d'animation lorsqu'elles sont cliquées :
animation type=5

#i+ Nombre de fois où l'icône va rebondir/tourner/clignoter/etc :
number of animation rounds=3

#F+
frame1_=
#M-999[logout;/usr/share/cairo-dock/plug-in/logout/readme;rhythmbox;/usr/share/cairo-dock/plug-in/rhythmbox/readme;dustbin;/usr/share/cairo-dock/plug-in/dustbin/readme;file-manager;/usr/share/cairo-dock/plug-in/file-manager/readme;clock;/usr/share/cairo-dock/plug-in/clock/readme;rendering;/usr/share/cairo-dock/plug-in/rendering/readme] 
# Liste des plug-ins actifs (applets et autres) :
#{Pour configurer un plug-in, activez-le, puis cliquez droit sur son icône. Certain plug-in n'ont pas d'icône, donc faites clique droit->cairo-dock->configure->modules}/
active modules=dustbin;logout;file_manager;rendering;

[Separators]

#F+[Générique]
frame1=

#i+ Taille minimale et maximale que les icônes peuvent avoir (au repos) :
# ou 0 si vous ne voulez pas les restreindre :
min icon size=0
#i+ ...
max icon size=0

#F+
frame1_=

#b+
# Utiliser les séparateurs ?
#{Les séparateurs sont des icônes utilisées pour faire une séparation entre les différents types d'icônes.}
use separator=true

#S+ Nom de fichier d'une image à utiliser pour les séparateurs :
separator image=separateur1.svg

#b+ Faire pivoter l'image du séparateur lorsque le dock est en haut/à droite/à gauche ?
revolve separator image=true

#b+ Forcer l'image du séparateur à rester de taille constante ?
force size=true


[Dialogs]

#F+[Boutons]
frame1=

#i+[10;99] Taille des boutons dans les info-bulles (largeur x hauteur) :
#{}
button width=48
#i+[10;99]  ...
button height=32

#S+ Nom de fichier d'une image à utiliser pour le bouton oui/ok :
#{Si vous ne spécifiez rien, une image par défaut sera utilisée.}
button_ok image=

#S+ Nom de fichier d'une image à utiliser pour le bouton non/annuler :
#{Si vous ne spécifiez rien, une image par défaut sera utilisée.}
button_cancel image=

#F+[Bulle]
frame2=

#e+[0;1] Transparence du fond de la bulle :
alpha=0.59999999999999998

#i+[0;99] Taille de l'icône affichée à côté du texte :
#{Mettez 0 pour que sa taille s'adapte à celle du texte.}
icon size=48

